<?php

namespace App\Providers;

use App\Nova\Facture;
use App\Nova\Location;
use Wdelfuego\NovaCalendar\DataProvider\AbstractCalendarDataProvider;
use Wdelfuego\NovaCalendar\Event;
use Wdelfuego\NovaCalendar\NovaCalendar;

class CalendarDataProvider extends AbstractCalendarDataProvider
{
    public function novaResources(): array
    {
        return [

            // Events without an ending timestamp will always be shown as single-day events:
            Location::class => ['from', 'to'],
            Facture::class => 'due_date',
        ];
    }

    protected function nonNovaEvents(): array
    {
        return [
        ];
    }

    public function timezone(): string
    {
        return 'Europe/Paris';
    }

    public function initialize(): void
    {
        $this->startWeekOn(NovaCalendar::MONDAY);
    }

    public function eventStyles(): array
    {
        return [
            'default' => [
                'color' => '#fff',
                'background-color' => '#0891b2'
            ],
            'invoice' => [
                'color' => '#fff',
                'background-color' => '#10b981'
            ],
            'invoiceUnpaid' => [
                'color' => '#fff',
                'background-color' => 'red'
            ], 'invoiceRet' => [
                'color' => '#fff',
                'background-color' => 'orange'
            ],
        ];
    }

    protected function customizeEvent(Event $event): Event
    {
        if ($event->hasNovaResource(Facture::class)) {
            if ($event->model()) {

                if ($event->model()->status === 'Impayé') {

                    $event->addStyle('invoiceUnpaid');
                    $event->addBadge('Impayé');
                    return $event;
                }
                if ($event->model()->status === 'Retard') {

                    $event->addStyle('invoiceRet');
                    $event->addBadge('Impayé');
                    return $event;
                }
            } else  $event->addStyle('invoice');
            $event->addBadge('facture');
            return $event;
        }

        $event->addBadge('location');
        return $event;// TODO: Change the autogenerated stub
    }


}
